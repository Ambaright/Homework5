---
title: "Summarizing & ggplot2 Plotting"
format: html
editor: visual
---

We first need to load the necessary libraries.

```{r, warning = FALSE}
library(tidyverse)
library(ggplot2)
library(dplyr)
```

# Summarizing Student Data

For this part, we’ll use data that comes from the UCI machine learning repository. The data is about secondary education in two Portuguese schools.

## Task 1: Read in the Data and Modify

- First, modify the code provided with the download to read in the data from a local file source (your downloaded .csv files) and combine the two data frames. Use local paths as they do in their code.

```{r}
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)

d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
```

- Second, read in and combine the data using functions from the tidyverse. Use an inner_join() on the variables they used in their code. Do you notice any issues? Make a note of the issue.

```{r}
mat_data <- read_delim("student-mat.csv", delim = ";", col_names = TRUE)
por_data <- read_delim("student-por.csv", delim = ";", col_names = TRUE)
school_data_error <- inner_join(mat_data, por_data,
                  by = c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")) |> collect()
head(school_data_error)
```

We note that we have multiple variables that are listed as var_name.x and var_name.y, which implies that the same variable name occurs in both data sets (`mat_data` and `por_data`). However, since we did not join on those variables and they exist in both `mat_data` and `por_data` we will get the var_name.x and var_name.y


- Use an inner_join() on all variables other than G1, G2, G3, paid, and absences. Use this form of the combined data in further exercises.

```{r}
school_data <- inner_join(mat_data, por_data, by = c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","guardian","traveltime","studytime","failures","schoolsup","famsup","activities","nursery","higher","internet","romantic","famrel","freetime","goout","Dalc","Walc","health")) |> collect()
```


- Next, for the math data, Portuguese, and combined data, choose four categorical variables you are interested in and convert those into factor variables in each tibble (use the same four variables in each). Use the mutate() function to accomplish this.

For this exercise, the four categorical variables i'll be interested in are: `address` (student's home address type (binary: 'U' - urban or 'R' - rural)), `Pstatus` (parent's cohabitation status (binary: 'T' - living together or 'A' - apart)), `activities`(extra-curricular activities (binary: yes or no)), and `higher` (wants to take higher education (binary: yes or no)).

```{r}
mat_data <- mat_data |>
  mutate(address = factor(address, levels = c("U", "R"), labels = c("Urban", "Rural")),
         Pstatus = factor(Pstatus, levels = c("T", "A"), labels = c("Together", "Apart")),
         activities = as.factor(activities),
         higher = as.factor(higher))

por_data <- por_data |>
  mutate(address = factor(address, levels = c("U", "R"), labels = c("Urban", "Rural")),
         Pstatus = factor(Pstatus, levels = c("T", "A"), labels = c("Together", "Apart")),
         activities = as.factor(activities),
         higher = as.factor(higher))

school_data <- school_data |>
  mutate(address = factor(address, levels = c("U", "R"), labels = c("Urban", "Rural")),
         Pstatus = factor(Pstatus, levels = c("T", "A"), labels = c("Together", "Apart")),
         activities = as.factor(activities),
         higher = as.factor(higher))
```

## Task 2: Summarize the Data (Very Basic EDA)

We’ve talked about the general process of conducting an EDA. You try to understand how your data is stored, what is missing, and you try to summarize the variables both numerically and visually to understand relationships within the data.

Do the rest of these items on the **combined data**:

- Look at how the data is stored and see if everything makes sense.

```{r}
print(school_data)
```

After investigating how our data is stored, everything makes sense and we can now investigate any missing values.

- Document the missing values in the data.

```{r}
colSums(is.na(school_data))
```

We note that there are no missing values in the data.

### Categorical Variables

-  Create a one-way contingency table, a two-way contingency table, and a three-way contingency table for some of the factor variables you created previously. Use table() to accomplish this.
    
    – Interpret a number from each resulting table (that is, pick out a value produced and explain what that value means.)

We first start with the one-way contingency table for `address`, to determine the counts for students who live in an Urban or Rural area. From the table below we see that 253 students out of the two Portuguese schools have an Urban home address.

```{r}
table(school_data$address)
```

Now we can look at a two-way contingency table for `address` and `higher`, to determine the counts for students interested in higher education across the two home address types Urban and Rural. From the table below we see that 64 out of the 67 Rural students want to take higher education.

```{r}
table(school_data$address, school_data$higher)
```

We can also take a look at a three-way contingency table for `address`, `higher`, and `Pstatus`. From the table below we see that of the students whose parents live together, 4 of the students living in an Urban home address do not have intentions of going for higher education.

```{r}
table(school_data$address, school_data$higher, school_data$Pstatus)
```

- Create a conditional two-way table using table(). That is, condition on one variable’s setting and create a two-way table. Do this using two different methods:

    – Once, by subsetting the data (say with filter()) and then creating the two-way table
    
We can subset the data to only have students whose parents are living together.

```{r}
together_data <- school_data |>
  filter(Pstatus == "Together")
table(together_data$address, together_data$higher)
```
    
    – Once, by creating a three-way table and subsetting it

We can similarly create this same conditional two-way table using the three-way table and subsetting it.

```{r}
three_way_address_higher_Pstatus <- table(school_data$address, school_data$higher, school_data$Pstatus)
three_way_address_higher_Pstatus[,,1]
```

- Create a two-way contingency table using group_by() and summarize() from dplyr. Then use pivot_wider() to make the result look more like the output from table().

```{r}
school_data |>
  group_by(address, higher) |>
  summarize(count = n()) |>
  pivot_wider(names_from = higher, values_from = count)
```

- Create a stacked bar graph and a side-by-side bar graph. Give relevant x and y labels, and a title for the plots.

For our stacked bar graph, we can look at `address` and `higher`.

```{r}
g <- ggplot(data = school_data, aes(x = address, fill = higher))
g + geom_bar() +
  labs(x = "Home Address", y = "Count of Students", 
       title = "Stacked Bar Graph of Students Home Address and Higher Education Goals") +
  scale_fill_discrete("Higher Education Goals")
```

We can now do a side-by-side bar plot for `Pstatus` and `activities`.

```{r}
g <- ggplot(data = school_data, aes(x = Pstatus, fill = activities))
g + geom_bar(position = "dodge") +
  labs(x = "Parental Living Status", y = "Count of Students",
       title = "Side-by-side Bar Graph of Parental Living Status and Student Involved in Activities") +
  scale_fill_discrete("Student Involved in Activities")
```

### Numeric Variables (across groups)

The numeric variables are age, absences, and the three test grades variables (G1, G2, and G3) from each data set (math and Portuguese).

- Find measures of center and spread for three of these variables (including at least one G3 variable)

Here are three numeric variables of interest are age, math G3 score, and Portuguese G3 score.

```{r}
school_data |>
  summarize(mean_age = mean(age), sd_age = sd(age), mean_mat_G3 = mean(G3.x),
            sd_mat_G3 = sd(G3.x), mean_por_G3 = mean(G3.y), sd_por_G3 = sd(G3.y))
```

    
    – Repeat while subsetting the data in a meaningful way.

Here we can subset to only include students who want to take higher education.

```{r}
school_data |>
  filter(higher == "yes") |>
  summarize(mean_age = mean(age), sd_age = sd(age), mean_mat_G3 = mean(G3.x),
            sd_mat_G3 = sd(G3.x), mean_por_G3 = mean(G3.y), sd_por_G3 = sd(G3.y))
```

- Find measures of center and spread across a single grouping variable for three of these variables (including a G3 variable as one of them)

Here we will use the same three numeric variables (age, math G3 score and Portugues G3 score) group according to `address`.

```{r}
school_data |>
  group_by(address) |>
  summarize(mean_age = mean(age), sd_age = sd(age), mean_mat_G3 = mean(G3.x),
            sd_mat_G3 = sd(G3.x), mean_por_G3 = mean(G3.y), sd_por_G3 = sd(G3.y))
```

- Find measures of center and spread across two grouping variables for three of these variables (including a G3 variable as one of them)

Again we will use the same three numeric variables and group by `address`, and include `Pstatus` as an extra grouping variable.

```{r}
school_data |>
  group_by(address, Pstatus) |>
  summarize(mean_age = mean(age), sd_age = sd(age), mean_mat_G3 = mean(G3.x),
            sd_mat_G3 = sd(G3.x), mean_por_G3 = mean(G3.y), sd_por_G3 = sd(G3.y))
```

- Create a correlation matrix between all of the numeric variables

```{r}
numeric_var <- c("age", "absences.x", "absences.y", "G1.x", "G2.x", "G3.x", "G1.y", "G2.y", "G3.y")
cor(school_data |> select(numeric_var))
```

- Create a histogram, kernel density plot, and boxplot for two of the numeric variables across one of the categorical variables (that is, create graphs that can compare the distributions across the groups on the same plot (no faceting here)). Add appropriate labels and titles.

Here we can look at the `age` and `G3.y` (Portuguese) across the `address` variable. That is we will create six different graphs.

First we have a histogram for student age across home address.

```{r}
#Histogram for age and address
hist <- ggplot(data = school_data, aes(x = age, fill = address))
hist + geom_bar(position = "dodge") +
  labs(x = "Age of Students", y = "Count of Students", 
       title = "Histogram of Age of Students Across Home Address") +
  scale_fill_discrete("Home Address")
```

Next we have a kernel density plot for student age across home address.

```{r}
#Kernel Density Plot for Age and Address
kernel <- ggplot(data = school_data, aes(x = age))
kernel + geom_density(alpha = 0.5, aes(fill = address)) +
  labs(x = "Age of Students", y = "Frequency of Students",
       title = "Kernel Density Plot for Age of Students Across Home Address") +
  scale_fill_discrete("Home Address")
```

Next, we have a box plot for age of students across address.

```{r}
#Box Plot for Age and Address
box <- ggplot(data = school_data, aes(x = address, y = age, fill = address))
box + geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.3) +
  labs(x = "Home Address", y = "Age of Students", 
       title = "Box Plot for Age of Students Across Home Address") +
  scale_fill_discrete("Home Address")
```

We can now examine the same plots but for the Portuguese final grade (`G3.y`) across home address.

```{r}
#Histogram for Portuguese final grade and address
hist <- ggplot(data = school_data, aes(x = G3.y, fill = address))
hist + geom_bar(position = "dodge") +
  labs(x = "Portugues Final Grade", y = "Count of Final Grade Scores", 
       title = "Histogram of Portuguese Final Grade Across Home Address") +
  scale_fill_discrete("Home Address")
```

```{r}
#Kernel Density Plot for Portugues Final Grade and Address
kernel <- ggplot(data = school_data, aes(x = G3.y))
kernel + geom_density(alpha = 0.5, aes(fill = address)) +
  labs(x = "Portuguese Final Grade", y = "Frequency of Final Grade",
       title = "Kernel Density Plot for Portugues Final Grade Across Home Address") +
  scale_fill_discrete("Home Address")
```

```{r}
#Box Plot for Portugues Final Grade and Address
box <- ggplot(data = school_data, aes(x = address, y = G3.y, fill = address))
box + geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.3) +
  labs(x = "Home Address", y = "Portuguese Final Grade", 
       title = "Box Plot for Portuguese Final Grade Across Home Address") +
  scale_fill_discrete("Home Address")
```



